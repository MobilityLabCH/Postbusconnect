openapi: 3.1.0
info:
  title: PostBus Connect API
  version: 0.1.0
servers:
  - url: http://localhost:4000
paths:
  /availability:
    get:
      summary: Disponibilité flotte/conducteurs
      parameters:
        - in: query
          name: from
          schema: { type: string }
        - in: query
          name: to
          schema: { type: string }
        - in: query
          name: date
          schema: { type: string, format: date }
      responses:
        "200":
          description: OK
  /trips:
    post:
      summary: Créer une course additionnelle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTrip"
      responses:
        "201": { description: Créé }
  /bookings:
    post:
      summary: Créer une réservation
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NewBooking" }
      responses:
        "201": { description: Créé }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Route:
      type: object
      properties:
        from_stop_id: { type: string }
        to_stop_id: { type: string }
      required: [from_stop_id, to_stop_id]
    NewTrip:
      type: object
      properties:
        partner_id: { type: string }
        route: { $ref: "#/components/schemas/Route" }
        date: { type: string, format: date }
        departure_time: { type: string, pattern: "^[0-2][0-9]:[0-5][0-9]$" }
        capacity: { type: integer, minimum: 1 }
        vehicle_preferences:
          type: object
          properties:
            electric: { type: boolean }
            low_floor: { type: boolean }
        pricing_model:
          type: object
          properties:
            type: { type: string, enum: [flat, per_passenger] }
            amount_chf: { type: number }
        visibility:
          type: object
          properties:
            public: { type: boolean }
      required: [partner_id, route, date, departure_time, capacity, pricing_model]
    Passenger:
      type: object
      properties:
        first_name: { type: string }
        last_name: { type: string }
    NewBooking:
      type: object
      properties:
        trip_id: { type: string }
        passengers:
          type: array
          items: { $ref: "#/components/schemas/Passenger" }
        source: { type: string, enum: [hotel, ot, operator, direct] }
        magic_pass_id: { type: string, nullable: true }
      required: [trip_id, passengers, source]
security:
  - bearerAuth: []
